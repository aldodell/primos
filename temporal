for (int i = 0; i < argc; i++)
    {

        //Get all parameter
        string parm = argv[i];
        //get pos of ":"
        size_t point = parm.find(":");

        string key, value;
        //If does no find ":" continue
        if (point == string::npos)
        {
            key = parm;
            value = "";
        }
        else
        {

            //get key:
            key = parm.substr(0, point);
            //get value:
            value = parm.substr(point + 1);
        }

        //Get number to factorize
        if (key.compare("number") == 0)
        {
            maxNumber = stoull(value);
        }
        else if (key.compare("debug") == 0) // verbose level (debug)
        {
            debugLevel = stoi(value);
        }
        else if (key.compare("file") == 0) // filename
        {
            filename = strdup(value.c_str());
            flagSave = true;
        }
        else if (key.compare("time") == 0) //time (sec?) to save
        {
            seconds = stoi(value);
        }
        else if (key.compare("from") == 0) //time (sec?) to save
        {
            from = stoull(value);
        }
        else if (key.compare("to") == 0) //time (sec?) to save
        {
            to = stoull(value);
        }
        else if (key.compare("distance") == 0) //time (sec?) to save
        {
            to = stoull(value);
        }
        else if (key.compare("action") == 0) //proccess
        {

            if (value.find("show") != std::string::npos)
            {
                //showInfo();
                actions += 4;
            }

            if (value.find("calculate") != std::string::npos)
            {
                //process(maxNumber);
                actions += 8;
            }

            if (value.find("list") != std::string::npos)
            {
                //listNumbers();
                actions += 2;
            }

            if (value.find("load") != std::string::npos)
            {
                //loadTable();
                actions += 1;
            }
        }
        else if (key.compare("help") == 0 ||
                 key.compare("-h") == 0 ||
                 key.compare("--help") == 0 ||
                 key.compare("?") == 0 ||
                 key.compare("-?") == 0)
        {
            cout << "\n"
                    "Arguments:\n"
                    "----------------------------------------------\n"
                    "number:n               (n is maximum number to search)\n"
                    "debug:n                (n is debug level, 0 is not debbugable, 1 and 2 are)\n"
                    "file:name              (name is a file name to load and save prime numbers)\n"
                    "time:n                 (n in seconds. Time to save file and show progress)\n"
                    "from:n                 ()\n"
                    "to:n                   ()\n"
                    "distance:n             ()\n"
                    "action:show            (show statics about file)\n"
                    "action:load            (load file)\n"
                    "action:list            (show a list with numbers. Use action:load first)\n"
                    "action:calculate       (calculate prime numbers)\n"
                    "----------------------------------------------\n"
                    "To continue calculating prime numbers you must first load the table.\n"
                    ">> action:load action:calculate \n";
        }
    }



/*
inline void saveFile()
{
    int64 b;
    ofstream ofs(filename, ios::binary);
    long i;
    for (i = 0; i < primesTable.size(); i++)
    {
        b = primesTable.at(i);
        ofs.write(reinterpret_cast<char *>(&b), sizeof(b));
    }
    ofs.flush();
    ofs.close();
}
*/

/*
inline void saveFile(vector<int64> numbersSet)
{
    int64 b;
    ofstream ofs(filename, ios_base::binary | ios_base::app);

    long i;
    for (i = 0; i < numbersSet.size(); i++)
    {
        b = numbersSet.at(i);
        ofs.write(reinterpret_cast<char *>(&b), sizeof(b));
    }
    ofs.flush();
    ofs.close();
}
*/

/*
void loadTable()
{
    int64 number;
    primesTable.clear();

    cout << "Loading table..." << endl;
    if (primesTable.size() == 0)
    {
        ifstream ifs(filename, ios::binary);
        while (ifs.peek() != EOF)
        {
            ifs.read(reinterpret_cast<char *>(&number), sizeof(number));
            primesTable.push_back(number);
        }
    }
    cout << "Loaded...Ok" << endl;
}
*/

//inline void saveFile();
//inline void saveFile(vector<int64> numbersSet);
//void showInfo();

/*
std::string quickAddThousandSeparators(std::string value, char thousandSep = '.')
{
    int len = value.length();
    int dlen = 3;

    while (len > dlen)
    {
        value.insert(len - dlen, 1, thousandSep);
        dlen += 4;
        len += 1;
    }
    return value;
}
*/



 argHdl.add(argument(0, (char *)"f", (char *)"file", (char *)"Prime number file"));
    argHdl.add(argument(1, (char *)"n", (char *)"number", (char *)"Max prime number"));
    argHdl.add(argument(2, (char *)"s", (char *)"show", (char *)"Show statics"));
    argHdl.add(argument(3, (char *)"l", (char *)"list", (char *)"Show primes number list"));
    argHdl.add(argument(4, (char *)"p", (char *)"process", (char *)"Calculate prime numbers"));


argHdl.add(argument(0, (char *)"f", (char *)"file", (char *)"Prime number file"), (char *)"filename");
    argHdl.add(argument(1, (char *)"n", (char *)"number", (char *)"Max prime number"), (char *)"N");
    argHdl.add(argument(2, (char *)"s", (char *)"show", (char *)"Show statics"), (char *)"");
    argHdl.add(argument(3, (char *)"l", (char *)"list", (char *)"Show primes number list"), (char *)"");
    argHdl.add(argument(4, (char *)"p", (char *)"process", (char *)"Calculate prime numbers"), (char *)"");




            min = p;
            // check p is 4k+3
            if (is4kp3(p))
            {
                cout << "-------------------------" << endl;
                cout << "Step 1: Large prime= " << quickAddThousandSeparators(to_string(p)) << endl;
                //form 4k+3:
                int k = (p - 3) / 4;
                if (isOdd(k))
                {
                    cout << "Number with form 4k+3=" << p << " is odd" << endl;

                    testNumbers.push_back(p);
                    //step 3
                    int64 N = p - 1;
                    cout << "Step 3: N=p-1=" << quickAddThousandSeparators(to_string(N)) << endl;

                    //step 4
                    if (isOdd(N / 2))
                    {
                        cout << "Step 5: N/2 Is Odd?=" << quickAddThousandSeparators(to_string(N / 2)) << endl;
                        cout << "Then factorize:" << endl;
                        factorize(N / 2, primesTable, factors);
                        showFactors(factors);

                        for (int j = 0; j < factors.size(); j++)
                        {
                            int64 factor = factors.at(j);
                            cout << "Step 6: With p=" << factor << " with 2p+1 is of form 4k+1?" << endl;
                            int64 f = (2 * factor) - 1;
                            int64 g = (f - 1) % 4;

                            if (g == 0)
                            {
                                int64 h = (f - 1) / 4;
                                if (isOdd(h))
                                {
                                    cout << h << "is odd" << endl;
                                }
                            }
                        }
                    }
                }
            }
        }







///////////////////////////
    size_t t1, t2;
    double timeElapsed = 0;
    double timeElapsedSinceStart = 0;
    int64 numberFounds = 0;
    char k;

    int64 p, q, r, s, s2, indexAccumulative;
    bool flag = true;

    //Initial prime
    p = 11;
    q = 0;
    r = 0;
    s = 0;
    s2 = 0;
    indexAccumulative = 0;

    if (previous > 0)
        p = previous;

    t1 = clock();

    while (p < max)
    {

        //Prime to evaluate
        p += 2;

        //Prime stored on the table
        s = 3;
        s2 = 9; //s * s;

        //Flag wich indicate if the number p is or not prime
        flag = true;

        //Save the inner status of the table
        saveStatus();

        while (s2 < p)
        {

            cout << p << " " << s << " " << s2 << " " << p % s << endl;

            if (p % s == 0)
            {
                flag = false;
                break;
            }
            s = next();
            s2 = s * s;
        }
        restoreStatus();
        if (flag)
        {
            //push(p);
            r = p;

            //Convert int64 to signed char
            k = (char)(p - previous - 127);

            primes.push_back(k);
            previous = p;
            index++;

            //Save on buffer
            buffer.push_back(k);
        }
        t2 = clock();
        timeElapsed = (double)((t2 - t1) / CLOCKS_PER_SEC);
        if (timeElapsed > timeToRefreshUI)
        {
            timeElapsedSinceStart += timeElapsed;
            save(filename);
            t1 = clock();
            numberFounds = index - indexAccumulative;
            cout << "Time elapsed: " << timeElapsedSinceStart << ". Last found=" << r << endl;
            cout << "Numbers found: " << numberFounds << endl;
            cout << "Rate n/s:" << (double)numberFounds / timeElapsed << endl;
            indexAccumulative = index;
        }
    }


    /**
 * Prototypes
 */

void process(int64 max, char *primeFilename);

//int64 lastPrimeFound();

//Debug level
int debugLevel = 0;

//second for verbose:
double seconds = 30;
double timeElapsed = 0;

// flag for save on file
bool flagSave = true;

//Result
vector<int64> primesTable;
vector<int64> primesTableBuffer;

void process(int64 max, char *primeFilename)
{

    //number to be evalute
    int64 n = 7;
    // prime got by table
    int64 p = 0;

    // iterator over table
    int64 i = 0;
    // root
    int64 r = 0;

    //last found prime
    int64 last;

    //timer
    clock_t time0, time1;
    double totalTime;

    if (primesTable.size() == 0)
    {
        primesTable.push_back(2);
        primesTable.push_back(3);
        primesTable.push_back(5);
        //copy first items
        primesTableBuffer = primesTable;
    }
    else
    {
        n = primesTable[primesTable.size() - 1];
        n = n + 2;
    }

    //copy first items

    time0 = clock();

    while (n < max)
    {

        i = 0;
        p = 0;
        r = sqrt(n);

        bool flag = true;
        while (p < r)
        {
            p = primesTable.at(i);
            if (n % p == 0)
            {
                flag = false;
                break;
            }
            i++;
        }
        if (flag && n > p)
        {
            primesTable.push_back(n);
            primesTableBuffer.push_back(n);
            last = n;
        }

        n += 2;

        /** Calculate time and save */
        //Calc time and save
        time1 = clock();
        totalTime = time1 - time0;

        if (totalTime >= (seconds * CLOCKS_PER_SEC))
        {
            if (flagSave)
            {
                // saveFile();
                saveFile(primesTableBuffer, primeFilename);
                primesTableBuffer.clear();
            }
            if (debugLevel > 1)
            {
                timeElapsed = timeElapsed + ((double)totalTime / CLOCKS_PER_SEC);
                cout << "Number: " << quickAddThousandSeparators(to_string(last)) << " at " << (int)timeElapsed << "s" << endl;
            }
            time0 = clock();
        }
    }
    if (flagSave)
    {
        //saveFile();
    }
}



/**  Load prime numbers*/
void loadTable(vector<int64> &primesTable, char *filename, int64 maximum)
{
    int64 number;
    primesTable.clear();

    cout << "Loading table..." << endl;
    if (primesTable.size() == 0)
    {
        ifstream ifs(filename, ios::binary);
        while (ifs.peek() != EOF)
        {
            ifs.read(reinterpret_cast<char *>(&number), sizeof(number));
            if (maximum > 0 && number > maximum)
            {
                break;
            }
            primesTable.push_back(number);
        }
    }
    cout << "Loaded...Ok" << endl;
}

void saveFile(vector<int64> &numbersSet, char *primeFilename)
{
    int64 b;
    ofstream ofs(primeFilename, ios_base::binary | ios_base::app);

    long i;
    for (i = 0; i < numbersSet.size(); i++)
    {
        b = numbersSet.at(i);
        ofs.write(reinterpret_cast<char *>(&b), sizeof(b));
    }
    ofs.flush();
    ofs.close();
}


class PrimeTable
{
public:
	//PrimeTable();
	void inline push(int64 p);
	int64 next();

	void reset();
	void clear();
	void save(char *filename);
	void load(char *filename);
	int64 last();
	//  void inline saveStatus();
	//  void inline restoreStatus();
	void generate(int64 max, char *filename, double timeToRefreshUI = 60, int debugLevel = 0);
	int debugLevel = 0;

private:
	vector<char> primes;
	vector<char> buffer;

	int64 previous = 0;
	int64 index = 0;
	int64 _previous = 0;
	int64 _index = 0;
};

/**
 * PrimeTable Class
 * Build and serve prime numbers.
 * Save a file with char (1 byte) type for each prime number.
 * Each byte is the difference with actually number and its predeccesor.
 * Example:
 *                      Dif     |       Number
 *                      2       |       2
 *                      1       |       3
 *                      2       |       5
 *                      2       |       7
 *  And so on..
 * */

void PrimeTable::clear()
{
	primes.clear();
	buffer.clear();
	reset();
}
void PrimeTable::reset()
{
	this->index = 0;
	this->previous = 0;
}

int64 PrimeTable::next()
{
	if (this->index == this->primes.size())
		return 0;
	//Convert signed char to int64
	int64 k = this->primes.at(index) + this->previous + 127;
	this->index++;
	this->previous = k;
	return k;
}

int64 PrimeTable::last()
{
	this->reset();
	int64 k = 1;
	int64 r;
	while (k > 0)
	{
		r = k;
		k = this->next();
	}
	return r;
}

void inline PrimeTable::push(int64 p)
{
	//Convert int64 to signed char
	char k = (char)(p - this->previous - 127);

	this->primes.push_back(k);
	this->previous = p;
	this->index++;

	//Save on buffer
	this->buffer.push_back(k);
}

void PrimeTable::save(char *filename)
{
	ofstream ofs(filename, ios_base::binary | ios_base::app);
	ofs.write((const char *)&this->buffer[0], this->buffer.size());
	ofs.close();
	this->buffer.clear();
}

void PrimeTable::load(char *filename)
{
	this->clear();

	if (debugLevel > 0)
	{
		cout << "Loading prime's number table." << endl;
	}

	ifstream ifs(filename, ios_base::binary);
	char b;
	while (ifs.get(b))
	{
		this->primes.push_back(b);
		this->previous += (int64)(b + 127);
		this->index++;
	}
	ifs.close();

	if (debugLevel > 0)
	{
		cout << "Table loaded. Last prime=" << this->last() << endl;
	}
}

void PrimeTable::generate(int64 max, char *filename, double timeToRefreshUI, int debugLevel)
{

	//Load if exits.
	if (debugLevel > 0)
	{
		cout << "Loading table..." << endl;
	}

	load(filename);
	if (debugLevel > 0)
	{
		cout << "Loaded." << endl;
	}

	//If the table is new populate with first prime numbers:
	if (primes.size() == 0)
	{
		push(2);  // 2
		push(3);  // 3
		push(5);  // 3
		push(7);  // 3
		push(11); // 3
	}

	int64 p = 13; //Number to evaluate
	int64 s = 3;  //Number used for calculate modulous
	int64 k = 0;
	int64 r = 0;
	long quantityNumbers;

	bool flag = true; // Flag wich indicate if we must to push p into primes table
	char c;			  //Delta codified..
	size_t timeIni;   //for timers
	double timeCycle = 0;
	double timeElapsed = 0; //get used time

	//If we loaded a table so charge p
	if (p < previous)
		p = previous;

	//Get initial time
	timeIni = clock();

	//Work while p < maximum
	while (p < max)
	{
		flag = true;

		/**
		* Save Status
		* */
		_previous = previous;
		_index = index;
		index = 1;
		previous = 2;

		while (true)
		{
			//Get a know prime to evaluate next:

			if (index == primes.size())
			{
				flag = false;
				break;
			}

			//Convert signed char to int64
			s = primes.at(index) + previous + 127;
			index++;
			previous = s;

			//If modulus == 0 is a composite number
			if (p % s == 0)
			{
				flag = false;
				break;
			}

			if ((s * s) > p)
			{
				break;
			}
		}

		/* Restore status */

		previous = _previous;
		index = _index;

		if (flag)
		{

			//Convert int64 to signed char
			c = (char)(p - previous - 127);

			primes.push_back(c);
			previous = p;
			index++;
			r = p;

			//Save on buffer
			buffer.push_back(c);
			if (debugLevel > 2)
			{
				cout << "Pushing a prime..." << r << endl;
			}
		}

		//Incremente next odd number
		p += 2;

		//Calculate time
		timeCycle = (double)(clock() - timeIni) / CLOCKS_PER_SEC;
		if (timeCycle >= timeToRefreshUI)
		{
			timeElapsed += timeCycle;
			quantityNumbers = buffer.size();

			//Save buffer data
			ofstream ofs(filename, ios_base::binary | ios_base::app);
			ofs.write((const char *)&buffer[0], buffer.size());
			ofs.close();
			buffer.clear();

			if (debugLevel > 1)
			{
				cout << "Last prime number found and saved=" << r << endl;
				cout << "Total time elapsed=" << timeElapsed << endl;
			}

			if (debugLevel > 1)
			{
				cout << "Rate n/s =" << (double)(quantityNumbers / timeCycle) << endl;
			}

			timeIni = clock();
		}
	}

	save(filename);
}


void calculate(int64 digits)
{

	vector<int64> testNumbers;
	int64 k, p, q, r, s, t, u;
	int i, requirdedNumbers;

	//get first number (may be not prime)
	int64 min = (pow(10, digits)) / log(2);
	cout << "Min number to process=" << min << endl;

	i = 0;
	p = 0;
	requirdedNumbers = 5;
	pg.reset();

	//Get a prime number getter than min:
	while (true)
	{

		factors.clear();
		p = pg.next();
		if (p == 0)
			break;

		if (p > min)
		{
			cout << "<------------------------------------------------>" << endl;
			cout << "Step 1a. Get a big prime=" << p << endl;
			cout << "Step 1b. Determine if " << p << " is 4k+3." << endl;

			if ((p - 3) % 4 == 0)
			{
				cout << "\tSuccess," << p << " is a 4k+3 number type." << endl;
			}
			else
			{
				cout << "\tFail: " << p << " is not a 4k+3 type." << endl;

				goto nextCycle;
			}

			cout << "Step 1c. Evaluate if (p-3)/4  = " << ((p - 3) / 4) << " is odd. " << endl;

			if (isOdd((p - 3) / 4))
			{
				cout << "\tSuccess, (p-3)/4  = " << ((p - 3) / 4) << " is odd." << endl;
			}
			else
			{
				cout << "\tFail, (p-3)/4  = " << ((p - 3) / 4) << " isn't odd. Search other big prime number." << endl;
				goto nextCycle;
			}

			cout << "Step 2. Get two numbers form 2^(p-1/2)-1 and 2^(p-1/2)+1 [not implemented]" << endl;

			int64 N = p - 1;
			cout << "Step 3. Obtain N = p - 1 -> N=" << N << endl;

			cout << "Step 4. Process (p-1)/2 -> N/2 = " << (N / 2) << endl;

			cout << "Step 5. Evaluate if N/2 is odd." << endl;
			if (isOdd(N / 2))
			{
				cout << "\tSuccess " << (N / 2) << " is odd, then factorize." << endl;
			}
			else
			{
				cout << "\tFail " << (N / 2) << " isn't odd." << endl;
				goto nextCycle;
			}

			//Factorize N/2 = P-1
			factorizer.find(N / 2);
			factors.clear();
			factors.insert(factors.begin(), factorizer.factors.begin(), factorizer.factors.end());

			for (int j = 0; j < factors.size(); j++)
			{
				// r is a factor of N/2=p-1
				r = factors.at(j);
				cout << "\t factor(" << j << ") -> p<" << j << "> =" << r << endl;
				cout << "\tStep 6a. Obtain 2p<" << j << ">+1 and verify if it is of the form: 4k+1" << endl;

				// s = 2p + 1 = 2r+1;
				s = (2 * r) + 1;
				cout << "\t\t2p<" << j << ">+1 = " << s << endl;

				//Determine if 2p+1 is 4k+1:
				t = (s - 1) % 4;

				if (t == 0)
				{
					cout << "\t\t\t Success: 2p<" << j << ">+1 is 4k+1 form. Now determine if k is odd." << endl;
					//Calculate 2p+1 to determinate if it is odd
					u = (s - 1) / 4;
					if (isOdd(u))
					{
						cout << "\t\t\t\t Success: 2p<" << j << ">+1 is 4k+1 form and odd." << endl;
						testNumbers.push_back(u);
					}
					else
					{
						cout << "\t\t\t\t Fail: 2p<" << j << ">+1 is 4k+1 form but isn't odd. We'll try with next factor." << endl;
						continue;
					}
				}
				else
				{
					cout << "\t\t\t Fail: 2p<" << j << ">+1 isn't 4k+1 form. We'll try with next factor." << endl;
					continue;
				}
			}
		}

	nextCycle:
		i++;
	}
}


bool is4kp3(int64 n)
{
	return (n - 3) % 4 == 0;
}

bool is4kp1(int64 n)
{
	return (n - 1) % 4 == 0;
}

int64 mersenne(int64 n)
{
	return pow(2, n) - 1;
}


 while (true)
    {

        b = 3;
        j = 1;

        p = a * b;
        if (p > part->end)
        {
            break;
        }

        while (true)
        {

            p = a * b;
            if (p >= (a * a))
            {

                /*
            if (p > max)
            {
                break;
            }
            */

                if (p > part->end)
                {
                    break;
                }

                //cout << p << endl;
                // Aquí debe ir el asignador del búfer
                spg->mutexBuffer.lock();
                spg->buffer2.push_back(p);
                spg->mutexBuffer.unlock();
            }

            b += s1[j];
            j++;
            if (j == 4)
            {
                j = 0;
            }
        }

        a += s1[i];
        i++;

        if (i == 4)
        {
            i = 0;
        }

        if (a == 9)
        {
            a = 11;
            i = 0;
        }
    }



     while (true)
    {
        // a = aTmp;
        // i = iTmp;

        while (true)
        {
            p = a * b;
            if (p > part->end)
                break;
            spg->mutexBuffer.lock();
            spg->buffer2.push_back(p);
            spg->mutexBuffer.unlock();

            a += s1[i];
            i++;
            if (i == 4)
                i = 0;
        }

        b += s1[j];
        j++;
        if (j == 4)
            j = 0;

        a = b;
        i = j;

        p = a * b;
        if (p > part->end)
        {
            break;
        }
        if (p < part->begin)
        {
            break;
        }
    }



 b = 3;
  j = 1;
  aTmp = a;
  iTmp = i;
  pmax = 0;

  while (true) {
    a = aTmp;
    i = iTmp;

    while (true) {
      p = a * b;
      if (p > part->end) {
        break;
      }
      // if (p > pmax) {
      buffer.push_back(p);
      pmax = p;
      // }

      a += s1[i];
      i++;
      if (i == 4)
        i = 0;
    }

    b += s1[j];
    j++;
    if (j == 4)
      j = 0;

    if (aTmp * b > part->end)
      break;
  }

while (true) {
    b = part->begin / a;
    n = normalizer(b);
    b = n.value;
    j = n.index;
    while (true) {
      p = a * b;
      if (p > part->end)
        break;
      //cout << p << endl;
      buffer.push_back(p);
      b += s1[j];
      j++;
      if (j == 4)
        j = 0;
    }
    a += s1[i];
    i++;
    if (i == 4)
      i = 0;
    if ((3 * a) > part->end)
      break;
  }


  >>>>>
  while (true) {
    b = part->begin / a;
    n = normalizer(b);
    b = n.value;
    j = n.index;

    while (true) {
      q++;
      p = a * b;
      if (p > part->end)
        break;
      buffer.push_back(p);
      b += s1[j];
      j++;
      if (j == 4)
        j = 0;
    }
    a += s1[i];
    i++;
    if (i == 4)
      i = 0;
    if ((a * a) > part->end)
      break;
  }
>>>>


char z = this->lastDigit(n);


    //Determinar si el número se puede divir por 2
    while (true)
    {
        if (mpz_tstbit(n.get_mpz_t(), 0ul) == 0)
        {
            mpz_div_2exp(n.get_mpz_t(), n.get_mpz_t(), 1ul);
            factors.push_back(2);
        }
        else
        {
            break;
        }
    }

    //Determinar sí se puede dividir por 5
    while (true)
    {

        if (lastDigit(n) == '5')
        {
            n /= 5;
            this->factors.push_back(5);
        }
        else
        {
            break;
        }
    }


      for (mpz_class f : this->factors) {
    for (int i = 0; i < objects.size(); i++) {
      if (mpz_cmp(objects[i].base.get_mpz_t(), f.get_mpz_t()) == 0) {
        flag = true;
        objects[i].exponent++;
      }
    }
    if (!flag) {
      bigFactorObject obj(f, 1);
      objects.push_back(obj);
      flag = false;
    }
  }

  //////
  /*
  if (index > (MAX_INTEGER / 20))
    return 0;

  unsigned int r;
  unsigned int block;
  unsigned int offset;
  unsigned int flag;

  while (true) {

    // Special case, index < 4
    if (index < 4) {
      switch (index) {
      case 0:
        r = 2;
        break;

      case 1:
        r = 3;
        break;

      case 2:
        r = 5;
        break;

      case 3:
        r = 7;
        break;
      }

      return r;
    }

    flag = 0;
    block = index / 8;
    offset = index - (8 * block);
    if ((this->buffer[block] & offset) == 1)
      break;
    index++;
  }

  // Normal case, index >= 4
  switch (offset) {
  case 0:
    flag = 1;
    break;
  case 1:
    flag = 3;
    break;
  case 2:
    flag = 7;
    break;
  case 3:
    flag = 9;
    break;
  case 4:
    flag = 11;
    break;
  case 5:
    flag = 13;
    break;
  case 6:
    flag = 17;
    break;
  case 7:
    flag = 19;
    break;
  }

  r = (20 * block) + flag;
  return r;
  */




  /*
    while (true) {
      // Store on pow2 the expression: 2^exp
      mpz_pow_ui(pow2.get_mpz_t(), two.get_mpz_t(), exp.get_ui());
      // tmpMax = pow2;

      while (true) {

        // Get module between evenN and pow2
        modK = evenN % pow2;
        // If module == 0 then proccess:
        if (modK == 0) {

          k = evenN / pow2;
          // Save power expression
          factor f;
          // base
          f.base = 2;
          // Exponent
          f.exp = exp * (((evenN - pow2) / (2 * pow2)) + 1);
          // Save it
          factors.push_back(f);
          // if (evenN / pow2) > 1 save it
          if (k > 1) {
            factorials.push_back(k);
          }
          // Decrease evenN
          evenN -= pow2;
          break;
        }
        evenN -= pow2;
      }

      // Increase exponent
      exp++;
      // Save on tmpMax 2^exp
      // If tmpMax > max then exit
      mpz_pow_ui(tmpMax.get_mpz_t(), two.get_mpz_t(), exp.get_ui());
      if (tmpMax > max)
        break;
    }
    */
