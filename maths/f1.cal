define oniFirstSquare(from) {
  local s, i, j, f, m, p;
  j = from;
  i = from;
  f = 1;
  m = (from ^ 2) - (2 * from);
  printf("m=%d\n ", m);

  while (f == 1) {
    while (issq(j) == 0) {
      i += 2;
      j += i;
    }
    printf("i=%d j=%d\n ", i, j);
    p = ((i ^ 2) + (2 * i) - m) / 4;

    printf("p=%d\n ", p);
    if (issq(p)) {
      printf("\nj=%d.\n", j);
      f = 0;
    }
    i += 2;
    j += i;
  }
}

define oni(x, y, minb, maxb, mind, maxd) {
  local a, b, c, d;
  local p1, p2;
  local p, m, r, t;

  p = x ^ y;
  m = int(p / 2);

  a = 1;

  do {
    d = mind;
    a += 2;
    if ((a ^ minb) > m) {
      goto out;
    }

    for (b = minb; b < maxb; b++) {
      p1 = a ^ b;

      if (p1 > m) {
        break;
      }
      p2 = p - p1;

      for (d = mind; d < maxd; d++) {
        c = iroot(p2, d);
        if (c == 1) {
          break;
        }
        t = c ^ d;
        if (t == p2) {
          if (isint(a / x) || isint(c / x)) {
            printf("No coprime: %d^%d+%d^%d=%d^%d\n", a, b, c, d, x, y);
          } else {
            goto success;
          }
        }
      }
    }

  } while (1);

success:
  r = strprintf("%d^%d+%d^%d=%d^%d", a, b, c, d, x, y);
  return r;

out:
}

define getRoot(n, min, max) {
  local a, b, p;
  a = 1;
  do {
    a++;
    for (b = min; b <= max; b++) {
      p = a ^ b;
      printf("%d^%d\n", a, b);
      if (p == n) {
        return strprintf("%d^%d", a, b);
      } else if (a ^ min > n) {
        return "0";
      }
    }
  } while (1);
  return "0";
}

/** Evalua creciendo */
define oni4(x, y, bMin, bMax, dMin, dMax) {
  local a, b, c, d, p, m, p1, p2, t, q;
  p = x ^ y;
  m = p / 2;
  a = 1;
  if (iseven(p)) {
    p1 = m - 1;
    q = 2;
  } else {
    p1 = int(m);
    q = 1;
  }

  do {
    a += q;
    if (a ^ bMin > m) {
      return "0";
    }
    for (b = bMin; b <= bMax; b++) {
      p1 = a ^ b;
      if (p1 > m) {
        break;
      }
      p2 = p - p1;
      for (d = dMin; d <= dMax; d++) {
        c = iroot(p2, d);
        if (c < 2) {
          break;
        }
        if (c ^ d == p2) {
          return strprintf("%d^%d+%d^%d=%d^%d", a, b, c, d, x, y);
        }
      }
    }
  } while (1);
}

/**
 * EvalÃºa decreciendo
 * */
define oni5(x, y, bMin, bMax, dMin, dMax) {
  local a, b, c, d, p, m, p1, p2, q;
  p = x ^ y;
  m = p / 2;

  if (iseven(p)) {
    p1 = m - 1;
    q = 2;
  } else {
    p1 = int(m);
    q = 1;
  }

  do {
    for (b = bMax; b >= bMin; b--) {
      a = iroot(p1, b);
      if (a > 1) {
        if (a ^ b == p1) {
          p2 = p - p1;
          for (d = dMax; d >= dMin; d--) {
            c = iroot(p2, d);
            if (c > 1) {
              if (c ^ d == p2) {
                return strprintf("%d^%d+%d^%d=%d^%d", a, b, c, d, x, y);
              }
            }
          }
        }
      }
    }
    p1 -= q;
    if (p1 < 2) {
      return "0";
    }
  } while (1);
}

/**
 * Evalua creciendo pero 1 a 1
 * */
define oni6(x, y, bMin, bMax, dMin, dMax) {
  local a, b, c, d, p, m, p1, p2;
  p = x ^ y;
  m = p / 2;

  a = 1;
  do {
    a++;
    if (a ^ bMin > m) {
      return strprintf("NO MATCH a=%d\n", a);
    }
    for (b = bMin; b <= bMax; b++) {
      p1 = a ^ b;
      if (p1 > m) {
        break;
      }
      p2 = p - p1;
      for (d = dMin; d <= dMax; d++) {
        c = iroot(p2, d);
        if (c < 2) {
          break;
        }
        if (c ^ d == p2 && !isint(p1 / x) && !isint(p2 / x)) {
          return strprintf("%d^%d+%d^%d=%d^%d", a, b, c, d, x, y);
        }
      }
    }
  } while (1);
}

define onix(minx, maxx, miny, maxy, minb, maxb, mind, maxd) {

  local i, j, s;
  for (i = minx; i <= maxx; i++) {
    for (j = miny; j <= maxy; j++) {
      printf("%d^%d = %s\n", i, j, oni6(i, j, minb, maxb, mind, maxd));
    }
  }
}

/**
 * Is m a power o n?
 */
define isPower(n, m) {
  local p;
  p = 1;
  if (n == 1) {
    return (m == 1);
  }
  while (p < m) {
    p *= n;
  }
  return (p == m);
}

define powerForm(n) {
  local p;
  local e, b;
  b = 2;
  do {
    p = 1;
    e = 0;
    while (p < n) {
      p *= b;
      e++;
    }
    if (p == n) {
      return strprintf("%d^%d", b, e);
    }
    b++;
  } while (b ^ 2 <= n);
  return 0;
}